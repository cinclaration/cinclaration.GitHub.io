<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Hyperspace Simulator</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: radial-gradient(circle, #121212, #000);
      font-family: Arial, sans-serif;
      color: white;
    }
    canvas {
      display: block;
    }
    #info {
      position: fixed;
      top: 10px;
      left: 10px;
      background: rgba(0, 0, 0, 0.7);
      padding: 10px 15px;
      border-radius: 5px;
      font-size: 0.9rem;
      z-index: 100;
    }
  </style>
</head>
<body>
  <div id="info">
    <p>Drag your finger to create evolving nodes. Watch as they adapt and form structures!</p>
  </div>
  <canvas id="geometryCanvas"></canvas>

  <!-- Three.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

  <script>
    // Three.js Setup
    const canvas = document.getElementById('geometryCanvas');
    const renderer = new THREE.WebGLRenderer({ canvas });
    renderer.setSize(window.innerWidth, window.innerHeight);

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 0, 20);

    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();

    const nodes = [];
    const connections = [];
    const nodeMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });

    let isDragging = false;

    // Node Class with Evolutionary Attributes
    class Node {
      constructor(x, y, z) {
        const geometry = new THREE.SphereGeometry(0.2, 16, 16);
        this.mesh = new THREE.Mesh(geometry, nodeMaterial);
        this.mesh.position.set(x, y, z);
        this.age = 0;
        this.energy = Math.random() * 50 + 50;
        this.intelligence = Math.random() * 50 + 50;
        this.connectivity = Math.random() * 10;
        this.survivability = Math.random() * 100;
        scene.add(this.mesh);
        nodes.push(this);
        console.log(`Node created at (${x}, ${y}, ${z})`);
      }

      evolve() {
        if (this.energy > 100) {
          this.intelligence += Math.random() * 5;
          this.connectivity += Math.random();
          this.energy = 50;
          console.log(`Node evolved: intelligence=${this.intelligence.toFixed(2)}`);
        }
      }

      dissipate() {
        this.age++;
        this.energy -= 0.5;
        if (this.age > 200 && this.energy <= 0 && Math.random() * 100 > this.survivability) {
          scene.remove(this.mesh);
          nodes.splice(nodes.indexOf(this), 1);
          console.log(`Node dissipated: age=${this.age}, energy=${this.energy}`);
        }
      }
    }

    // Function to Create a Node
    function createNode(x, y, z) {
      return new Node(x, y, z);
    }

    // Function to Connect Nodes
    function connectNodes(node1, node2) {
      const points = [node1.mesh.position, node2.mesh.position];
      const geometry = new THREE.BufferGeometry().setFromPoints(points);
      const line = new THREE.Line(geometry, new THREE.LineBasicMaterial({ color: 0x007bff }));
      scene.add(line);
      connections.push({ line, node1, node2 });
      console.log(`Connected nodes: (${node1.mesh.position.x}, ${node1.mesh.position.y}) <-> (${node2.mesh.position.x}, ${node2.mesh.position.y})`);
    }

    // Generate Nodes and Shapes While Dragging
    function onPointerMove(event) {
      if (!isDragging) return;

      const rect = canvas.getBoundingClientRect();
      mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
      mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;

      raycaster.setFromCamera(mouse, camera);
      const point = raycaster.ray.origin.clone().add(raycaster.ray.direction.multiplyScalar(10));
      const newNode = createNode(point.x, point.y, point.z);

      nodes.forEach(node => {
        if (node !== newNode && node.mesh.position.distanceTo(newNode.mesh.position) < 5) {
          connectNodes(newNode, node);
        }
      });
    }

    canvas.addEventListener('pointerdown', () => (isDragging = true));
    canvas.addEventListener('pointerup', () => (isDragging = false));
    canvas.addEventListener('pointermove', onPointerMove);

    // Animation Loop
    function animate() {
      nodes.forEach(node => {
        node.evolve();
        node.dissipate();
      });

      renderer.render(scene, camera);
      requestAnimationFrame(animate);
    }

    // Initial Test Node
    createNode(0, 0, 0);

    animate();
  </script>
</body>
</html>